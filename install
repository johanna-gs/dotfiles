#!/usr/bin/env bash


set -e

META_DIR="meta"
CONFIG_DIR="configs"
PROFILES_DIR="profiles"

BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

cd "${BASE_DIR}"
git submodule update --init --recursive

unameOut=$(uname -a)
case "${unameOut}" in
*Microsoft*) OS="WSL" ;; #wls must be first since it will have Linux in the name too
*microsoft*) OS="WSL2" ;;
Linux*) OS="Linux" ;;
Darwin*) OS="Mac" ;;
CYGWIN*) OS="Cygwin" ;;
MINGW*) OS="Windows" ;;
*Msys) OS="Windows" ;;
*) OS="UNKNOWN:${unameOut}" ;;
esac

if [[ ${OS} == "Mac" ]] && sysctl -n machdep.cpu.brand_string | grep -q 'Apple M1'; then
    #Check if its an M1. This check should work even if the current processes is running under x86 emulation.
    OS="MacM1"
fi

case $OS in
MacM1)
    CONFIG=".profiles/mac/dotbot-mac.yml"
    ;;
WSL2)
    CONFIG=".profiles/wsl/dotbot-wsl.yml"
    ;;
Windows)
    echo "To run this script in windows, use the install.ps1 script instead"
    exit
    ;;
*)
    echo "No configuration found for ${OS}!"
    exit 1
    ;;
esac

# ------------------------------------------------------------------------------------------------ #
# Utility functions

# print line banner
# used for segmenting when a profile configs is being executed.
# For VISUAL purposes
printLineBanner() {
  # print a line depending on the terminal width
  # https://unix.stackexchange.com/a/425158
  # https://stackoverflow.com/a/17030976/3053548
  #
  # print ANSI color using printf
  # https://stackoverflow.com/a/26873040/3053548
  printf '\e[1;34m%0.s#\e[0m' $(seq 1 $(stty size | awk '{print $2}'))
}

# ------------------------------------------------------------------------------------------------ #
# Verify dotbot profile exists
# Checks if the file exists in meta/profiles/ folder

exitIfProfileNotFound=false    # used as a flag to exit IF a profile is NOT found
for profile in ${@}; do
  # check if the profile filepath doesn't exist
  #   print message
  #   flag variable to exit

  profileFilepath="${BASE_DIR}/${META_DIR}/${PROFILES_DIR}/${profile}"

  if [[ ! -e $profileFilepath ]]; then
    echo -e "Dotbot profile \\033[1;31m$profileFilepath \\033[0mNOT found"

    exitIfProfileNotFound=true
  fi
done

# exit if a profile filepath is NOT found
if [[ $exitIfProfileNotFound == true ]]; then
  echo -e "\nexiting"
  exit 1
fi

# cleanup variables
unset exitIfProfileNotFound

echo "Running installer for $OS"

DOTBOT_DIR="dotbot"
DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

cd "${BASEDIR}"
git -C "${DOTBOT_DIR}" submodule sync --quiet --recursive
git submodule update --init --recursive "${DOTBOT_DIR}"

"${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" "${@}"
